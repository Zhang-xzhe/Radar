clear all; clc; close all;
warning('off')

% 扫描次数与扫描周期
N = 4;
M = 3;
T = 5; %秒

% 所考虑的正方形仿真区域
Xscope = 10^5;
Yscope = 10^5;

% 目标运动参数
v = 350;     % 500m/s
theta = 0;   % 水平正x轴运动

sigmax=50;
sigmay=5;

% 距离观测标准差与方位角观测标准差
sigma_r = 40;
sigma_theta = 0.3;

% 所考虑的正方形仿真区域内的杂波平均数
renbuda = 100;

% 指定4次扫描的杂波个数，每个周期的数目服从泊松分布，分布的均值由面积大小
% 以及单位面积内杂波数的乘积确定
K = poissrnd(renbuda, 1, N);

% 限制关联规则中的最大与最小速度、最大加速度和连续三次扫描的夹角
vmin = 2*v/3;
vmax = 3*v/2;
% amax = 50;
thetamax = 90;
% thetamax = pi/2;

%量测方程
H = [1 0 0 0;0 0 1 0];
F = [1 T 0 0; 0 1 0 0;  0 0 1 T;0 0 0 1];
R = [80 0;0 80];


%% 仿真产生5个目标的航迹(量测数据) %%
radar1 = simutrack(55000, 55000, v, theta, 0, 0, sigma_r, sigma_theta, T, N); %4行2列
radar2 = simutrack(45000, 45000, v, theta, 0, 0, sigma_r, sigma_theta, T, N);
radar3 = simutrack(35000, 35000, v, theta, 0, 0, sigma_r, sigma_theta, T, N);
radar4 = simutrack(45000, 25000, v, theta, 0, 0, sigma_r, sigma_theta, T, N);
radar5 = simutrack(55000, 15000, v, theta, 0, 0, sigma_r, sigma_theta, T, N);

%% 每次扫描所得点迹集合sample中的前5个点被设定为目标点 %%
i = 0;
for k = K
    i = i + 1;
    cycle(i).sample = [rand(k,1)*Xscope rand(k,1)*Yscope];       %cycle为结构体   存储杂波点
    cycle(i).sample = [radar1(i,:); radar2(i,:); radar3(i,:);
        radar4(i,:); radar5(i,:); cycle(i).sample];
end

%% 用第一次扫描的点迹建立暂时航迹 %%
for i = 1:size(cycle(1).sample, 1)
    track(i).seq = cycle(1).sample(i,:);
%     track(i).shouldadd = [];
    track(k).assoi_point = [];      %存储与航迹关联的点迹的关联值
end

%% 用第二次扫描的点建立可能航迹 %%
for i = 2
    tracknum = size(track,2);      %求得暂态航迹数
    tracknum_temp = tracknum;
    samplenum = size(cycle(i).sample,1);     %求得第二帧的量测点迹数
    
    D = zeros(tracknum,samplenum);      %存储暂态航迹与量测的关联值
    %% 计算本次扫描的所有点迹与暂态航迹的关联值 %%
    for j = 1:samplenum
        data = cycle(i).sample(j,:);
        for k = 1:tracknum
            if size(track(k).seq,1) > 0
                data1 = track(k).seq;
                D(k,j) = (data(1)-data1(1))^2 + (data(2)-data1(2))^2;
            end                 
        end
    end
    
    for j = 1:samplenum
        flag = 0;
        for k = 1:tracknum
            if D(k,j) >= (vmin*T)^2 && D(k,j) <= (vmax*T)^2
                track(k).assoi_point = [track(k).assoi_point;D(k,j) j];
                flag = 1;
            end
        end
        
        %% 与暂态航迹未关联的点迹作为新的暂态航迹头
        if flag == 0
            tracknum_temp =tracknum_temp + 1;
            
            track(tracknum_temp).seq = cycle(i).sample(j,:);
            track(tracknum_temp).assoi_point = [];
        end
    end
    
    %% 由关联点迹判别，对暂态航迹进行处理 %%
    for k = 1:tracknum
        L = size(track(k).assoi_point,1);
        if L == 1
            j = track(k).assoi_point(end,2);
            track(k).seq = [track(k).seq;cycle(i).sample(j,:)];
        end
        if L > 1
            min = track(k).assoi_point(1,:);
            for j = 2:L
                if (track(k).assoi_point(j,1) - (v*T)^2) < (min(1) - (v*T)^2)
                    min = track(k).assoi_point(j,:);
                end
            end
            track(k).seq = [track(k).seq;cycle(i).sample(min(2),:)];
        end
        if L == 0
            track(k).seq = [];
        end
    end
    
    %% 整编航迹 %%
    track1 = [];
    track1num = 0;
    for j = 1:tracknum_temp
        if ~isempty(track(j).seq)
            track1num = track1num + 1;
            
            track1(track1num).seq = track(j).seq;
            track1(track1num).assoi_point = track(j).assoi_point;
        end
    end
    track = track1;
%     clear track1;
end

%% 用第三帧扫描的点迹建立可靠航迹 %%
for i = 3
    tracknum = size(track,2);
    samplenum = size(cycle(i).sample,1);
    for j = 1:tracknum
        track(j).assoi_point = [];
        num = size(track(j).seq,1);     %计算每条航迹中的点迹数
        %% 暂态航迹中只有一个点迹时 %% 
        if num == 1   
            data = track(j).seq(end,:);
            for k = 1:samplenum
                data1 = cycle(i).sample(k,:);
                d(k) = (data1(1) - data(1))^2 + (data1(2) - data(2))^2;
                if d(k) >= (vmin*T)^2 && d(k) <= (vmax*T)^2
                    track(j).assoi_point = [track(j).assoi_point;d(k) k];
                end
            end
            L = size(track(j).assoi_point,1);
            if L == 1
                k = track(j).assoi_point(end,2);
                track(j).seq = [track(j).seq;cycle(i).sample(k,:)];
            end
            if L > 1
               min = track(j).assoi_point(1,:);
               for  k = 2:L
                    if (track(j).assoi_point(k,1) - (v*T)^2) < (min(1) - (v*T)^2)
                        min =track(j).assoi_point(k,:);
                    end
               end
               track(j).seq = [track(j).seq;cycle(i).sample(min(2),:)];
            end
            if L == 0
            track(j).seq = [];
            end
        end
        %% 暂态航迹中多于一个点迹时 %%
        if num > 1
            data = track(j).seq(end-1,:);     %航迹中的倒数第二个点迹
            data1 = track(j).seq(end,:);      %航迹中的最后一个点迹
            X = [data1(1) (data1(1)-data(1))/T data1(2) (data1(2)-data(2))/T]';
            P = [sigmax^2 sigmax^2/T 0 0;sigmax^2/T 2*sigmax^2/T^2 0 0;0 0 sigmay^2 sigmay^2/T;0 0 sigmay^2/T sigmay^2/T^2];
            X1 = F*X;
            P1 = F*P*F';
            Z1 = H*X1;
            S = H*P1*H' + R;
            for k = 1:samplenum 
                data2 = cycle(i).sample(k,:)';
                d1(k) = (data2 - Z1)'*inv(S)*(data2 - Z1);
                a = (data2(1) - data1(1))^2 + (data2(2) - data1(2))^2;
                b = (data1(1) - data(1))^2 + (data1(2) - data(2))^2;
                c = (data2(1) - data(1))^2 + (data2(2) - data(2))^2;
                alpha = acos((a + b - c)/(2*sqrt(a*b)));
                alpha = 180 - alpha * 180 / pi;
                if d1(k) < 9.21 && alpha < thetamax
                    track(j).assoi_point = [track(j).assoi_point;d1(k) k];
                end
            end
            L = size(track(j).assoi_point,1);
            if L == 1
                k = track(j).assoi_point(end,2);
                track(j).seq = [track(j).seq;cycle(i).sample(k,:)];
            end
            if L > 1
                min = track(j).assoi_point(1,:);
                for k = 2:L
                    if track(j).assoi_point(k,1) < min(1)
                        min = track(j).assoi_point(k,:);
                    end
                end
                track(j).seq = [track(j).seq;cycle(i).sample(min(2),:)];
            end
        end
    end
     
    %% 对航迹进行整编 %% 
    track2 = [];
    track2num = 0;
    for j = 1:tracknum
        if ~isempty(track(j).seq)
            track2num = track2num + 1;
            
            track2(track2num).seq = track(j).seq;
            track2(track2num).assoi_point = track(j).assoi_point;
        end
    end
    track = track2;
    
%     %% 对于可靠航迹中的点迹有等于三个的，作为成功起始的新航迹 %%
%     tracknew = [];
%     tracknewnum = 0;
%     for j = 1:track2num
%         if size(track(j).seq,1) == 3
%             tracknewnum = tracknewnum + 1;
%             
%             tracknew(tracknewnum).seq = track(j).seq;
%         end
%     end
end

%% 用第四次扫描的点迹继续判别航迹 %%
for i = 4
    samplenum = size(cycle(i).sample,1);       %第四次扫描的量测数
    tracknum = size(track,2);    %求得此时的航迹数
    for j = 1:tracknum
        L = size(track(j).assoi_point,1);
        data = track(j).seq(end,:);
        if L == 0    %如果航迹在上一帧没有关联点迹，则对航迹进行直线外推
          X =  F*[track(j).seq(end,1) (track(j).seq(end,1)-track(j).seq(end-1,1))/T track(j).seq(end,2) (track(j).seq(end,2)-track(j).seq(end-1,2))/T]'; 
          P = F*[sigmax^2 sigmax^2/T 0 0;sigmax^2/T 2*sigmax^2/T^2 0 0;0 0 sigmay^2 sigmay^2/T;0 0 sigmay^2/T sigmay^2/T^2]*F';
          X1 = F*X;
          P1 = F*P*F';
          Z1 = H*X1;
          S = H*P1*H' + R;
          data1 = [data(1)*v*T data(2)];
%           track(j).seq = [track(j).seq;data1];
          for k = 1:samplenum
              data2 = cycle(i).sample(k,:)';
              d(k) = (data2 - Z1)'*inv(S)*(data2 - Z1);
              a = (data2(1) - data1(1))^2 + (data2(2) - data1(2))^2;
              b = (data1(1) - data(1))^2 + (data1(2) - data(2))^2;
              c = (data2(1) - data(1))^2 + (data2(2) - data(2))^2;
              alpha = acos((a + b - c)/(2*sqrt(a*b)));
              alpha = 180 - alpha * 180 / pi;
              if d(k) < 9.21 && alpha < thetamax
                  track(j).assoi_point = [track(j).assoi_point;d(k) k];
              end
          end
          if size(track(j).assoi_point,1) == 1
              k = track(j).assoi_point(end,2);
              track(j).seq = [track(j).seq;cycle(i).sample(k,:)];
          end
          if size(track(j).assoi_point,1) > 1
              min = track(j).assoi_point(1,:);
              for k = 2:size(track(j).assoi_point,1)
                  if track(j).assoi_point(k,1) < min(1)
                      min = track(j).assoi_point(k,:);
                  end
              end
              track(j).seq = [track(j).seq;cycle(i).sample(min(2),:)];
          end
          if size(track(j).assoi_point,1) == 0
              track(j).seq = [];
          end
        end
        if L > 0
           track(j).assoi_point = [];
           data = track(j).seq(end-1,:);
           data1 = track(j).seq(end,:);
           X = [data1(1) (data1(1) - data(1))/T data1(2) (data1(2)-data(2))/T]';
           P = F*[sigmax^2 sigmax^2/T 0 0;sigmax^2/T 2*sigmax^2/T^2 0 0;0 0 sigmay^2 sigmay^2/T;0 0 sigmay^2/T sigmay^2/T^2]*F';
           X1 = F*X;
           P1 = F*P*F';
           Z1 = H*X1;
           S = H*P1*H' + R;
           for k = 1:samplenum
               data2 = cycle(i).sample(k,:)';
               d(k) = (data2 - Z1)'*inv(S)*(data2 - Z1);
               a = (data2(1) - data1(1))^2 + (data2(2) - data1(2))^2;
               b = (data1(1) - data(1))^2 + (data1(2) - data(2))^2;
               c = (data2(1) - data(1))^2 + (data2(2) - data(2))^2;
               alpha = acos((a + b - c)/(2*sqrt(a*b)));
               alpha = 180 - alpha * 180 / pi;
               if d(k) < 9.21 && alpha < thetamax
                   track(j).assoi_point = [track(j).assoi_point;d(k) k];
               end
           end
           if size(track(j).assoi_point,1) == 1
               k = track(j).assoi_point(end,2);
               track(j).seq = [track(j).seq;cycle(i).sample(k,:)];
           end
           if size(track(j).assoi_point,1) > 1
              min = track(j).assoi_point(1,:);
              for k = 2:size(track(j).assoi_point,1)
                  if track(j).assoi_point(k,1) < min(1)
                      min = track(j).assoi_point(k,:);
                  end
              end
              track(j).seq = [track(j).seq;cycle(i).sample(min(2),:)];
           end
        end
    end
    
%     %% 整编航迹 %%
%     track3 = [];
%     track3num = 0;
%     for j = 1:tracknum
%         if ~isempty(track(j).seq)
%             track3num = track3num + 1;
%             
%             track3(track3num).seq = track(j).seq;
%         end
%     end
    %%  对于可靠航迹中的点迹有等于三个的，作为成功起始的新航迹 %%   
%     for j = 1:track3num
%         if size(track3(j).seq,1) == 3
%             tracknewnum = tracknewnum + 1;
%             
%             tracknew(tracknewnum).seq = track3(j).seq;
%         end
%     end
    tracknew = [];
    tracknewnum = 0;
    for j = 1:tracknum
        if size(track(j).seq,1) > 2
            tracknewnum = tracknewnum + 1;
            tracknew(tracknewnum).seq = track(j).seq;
        end
    end
end
  
%% 画图 %%
figure(1);
s = ['*', 's', '+', '.'];
hold on;
for i = 1:N
    plot(cycle(i).sample(6:end,1), cycle(i).sample(6:end,2), s(i));
end

plot([radar1(:,1); radar2(:,1); radar3(:,1); radar4(:,1); radar5(:,1)],...
     [radar1(:,2); radar2(:,2); radar3(:,2); radar4(:,2); radar5(:,2)], 'o');
for ii = 1:size(tracknew,2)
    data = tracknew(ii).seq;
    plot(data(:,1),data(:,2), '-');
end 
xlim([0, Xscope]);
ylim([0, Yscope]);
box on;

figure(2);
hold on;
for ii = 1:size(tracknew,2)
    data = tracknew(ii).seq;
    plot(data(:,1),data(:,2), '-');
end
xlim([0, Xscope]);
ylim([0, Yscope]);
box on;

% %% 航迹检测概率 %%
% syms x z
% f = exp(-x^2/2);
% 
% figure(3)
% hold on;
% sigma = 100:100:1000;
% m = length(sigma);
% for i =1:m
%     L = (vmin*T/(sqrt(2)*sigma(i)))^2;
%     H = (vmax*T/(sqrt(2)*sigma(i)))^2;
%     u = v*T/(sqrt(2)*sigma(i));
%     
%     f1 = 2/sqrt(pi)*int(f,0,sqrt((H-z^2)/2))*(exp(-(z-u)^2/2) + exp(-(z+u)^2/2));
%     f2 = 2/sqrt(pi)*int(f,0,sqrt((L-z^2)/2))*(exp(-(z-u)^2/2) + exp(-(z+u)^2/2));
%     f3 = (f)^(2*u^2);
%     p1 = 1/pi*(int(f1,0,sqrt(H)) - int(f2,0,sqrt(L)));
%     p2 = 2*u/sqrt(pi)*int(f3,0,tan(pi/4));
%     p(i) = p1*p2;
%     p(i) = double(p(i));
%     plot(sigma(i),p(i),'*');
% end
% % axis([100 1000 0 1]);
% xlim([100, 1000]);
% ylim([0, 10]);
% box on;
% i = 1:m;
% plot(sigma(i),p(i),'b*');
% xlable(100,1000);
% ylable(0,1);
% hold on


 
